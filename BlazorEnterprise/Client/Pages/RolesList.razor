@page "/roles"
@inject HttpClient Http
@inject NavigationManager Nav
@using BlazorEnterprise.Shared
@using System.Net.Http.Json
<TopBar ScreenName="Roles"/>
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            @if (!string.IsNullOrEmpty(Error))
            {
                <div class="alert alert-danger col-md-12">
                    @Error
                </div>
            }
            <div class="iq-card iq-card-block iq-card-stretch iq-card-height">
                <div class="iq-card-header d-flex justify-content-between">
                    <div class="iq-header-title">
                        <button class="btn btn-primary" @onclick="Add">Add</button>
                    </div>
                </div>
                <div class="iq-card-body">
                    <div class="table-responsive">
                        <table class="table mb-0 table-borderless">
                            <thead>
                                <tr>
                                    <th scope="col">Role</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var r in Roles)
                                {
                                    <tr>
                                        <td>@r.RoleName</td>
                                        <td>
                                            <button class="btn btn-info" @onclick="@(()=>Edit(r))"><i class="ri-pencil-fill mr-2"></i> Edit</button>
                                            <button class="btn btn-danger" @onclick="@(()=>Delete(r))"><i class="ri-delete-bin-6-fill mr-2"></i> Delete</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code
{
    string Error = "";
    RoleViewModel[] Roles = Array.Empty<RoleViewModel>();
    public string DisplayName { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ActiveScreen.Screen = "Roles";
        try
        {
            Roles = await Http.GetFromJsonAsync<RoleViewModel[]>("Roles/AllRoles");
        }
        catch(Exception ex)
        {
            Error=ex.Message;
            StateHasChanged();
        }
    }

    void Add()
    {
        Nav.NavigateTo("roleDetail/0");
    }

    void Edit(RoleViewModel role)
    {
        Nav.NavigateTo($"roleDetail/{role.RoleId}");
    }

    async void Delete(RoleViewModel role)
    {
        Error = "";
        try
        {
            var req = await Http.PostAsJsonAsync("Roles/Delete", role.RoleId);
            var res = await req.Content.ReadAsStringAsync();
            if (!res.Contains("Success"))
            {
                Error = res;
                StateHasChanged();
            }
            else
            {
                Roles = await Http.GetFromJsonAsync<RoleViewModel[]>("Roles/AllRoles");
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            StateHasChanged();
        }
    }

}